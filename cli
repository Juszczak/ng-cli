#!/usr/bin/env node

const {resolve} = require('path')
const {existsSync, mkdirSync, readdirSync, readFileSync, writeFileSync} = require('fs')

const readParentModuleName = (path) => {
  const parentDir = resolve(path, '../')
  const moduleFile = readdirSync(parentDir).filter(dirname => dirname.match(/Module.ts$/)).join('')
  const fileContents = readFileSync(resolve(parentDir, moduleFile), 'utf8')
  return fileContents.split('module(\'')[1].split('\',')[0]
}

const formatModuleName = (name) => name.charAt(0).toLowerCase() + name.slice(1)

const generateModuleName = (path, elementName) => {
  return readParentModuleName(path) + '.' + formatModuleName(elementName)
}

const render = (template, model) => {
  Object.keys(model)
    .map(key => ({pattern: key, variable: model[key]}))
    .forEach(({pattern, variable}) => {
      const regexp = new RegExp(`#${pattern}#`, 'g')
      template = template.replace(regexp, variable)
    })
  return template
}

const getTemplatePath = (templateType) => resolve(__dirname, `./templates/${templateType.toLowerCase()}.tts`)

const generateFile = (path, elementType, elementName) => {
  const template = readFileSync(getTemplatePath(elementType), 'utf8')
  const content = render(template, {
    name: elementName,
    componentString: formatModuleName(elementName),
    moduleName: formatModuleName(elementName),
    moduleId: generateModuleName(path, elementName),
    controllerAs: elementName.toLowerCase(),
  })

  readParentModuleName(path)

  const dir = resolve(process.cwd(), path)
  if (!existsSync(dir)){
      mkdirSync(dir);
  }
  writeFileSync(resolve(path, `./${elementName}${elementType}.ts`), content)
}

const generate = (path, name) => {
  const types = ['Component', 'Controller', 'Module']
  types.forEach(type => generateFile(path, type, name))
  writeFileSync(resolve(path, `./${name}.html`))
}

method = process.argv.length > 3
  ? () => {
    const name = process.argv[2]
    const path = resolve(process.argv[3])
    generate(path, name)
  }
  : () => console.log(`
  ng-cli

  usage:

    ng [name] [path]
`)

method()
